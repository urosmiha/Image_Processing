LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- This kernel selector will support two filters; Sobel and Gaussian.
entity kernel_select is
port (
		clk		: in std_logic;
		kernel	: out signed(36 downto 1);
		sel		: in std_logic_vector(2 downto 0);
		denom		: out signed(5 downto 0)

);
end entity;

architecture beh of kernel_select is

	signal gauss_kernel 	 : signed(36 downto 1) := X"121242121";	-- [1,2,1,2,4,2,1,2,1] Gaussian Blur;
	signal sobel_x_kernel : signed(36 downto 1) := X"10F20E10F";	-- [1,0,-1,2,0,-2,1,0,-1] Sobel X
	signal sobel_y_kernel : signed(36 downto 1) := X"121000FEF";	-- [1,2,1,0,0,0,-1,-2,-1] Sobel Y
	signal identity_kernel: signed(36 downto 1) := X"0000F0000";	-- [0,0,0,0,1,0,0,0,0] Identity
	
	signal single_denom : signed(5 downto 0) := "000001";	-- 1
	signal gauss_denom  : signed(5 downto 0) := "010000";	-- 16

begin

	process(clk)
	begin
		if(rising_edge(clk)) then
		
			case sel is
				when "001" =>	-- Gauss
					kernel <= gauss_kernel;
					denom  <= gauss_denom;
				when "010" =>	-- Sobel X
					kernel <= sobel_x_kernel;
					denom  <= single_denom;
				when "011" =>	-- Sobel Y
					kernel <= sobel_y_kernel;
					denom  <= single_denom;
				when "100" =>	-- Identity
					kernel <= identity_kernel;
					denom  <= single_denom;
				when others =>
				
			end case;
		end if;
		
	end process;
end architecture;